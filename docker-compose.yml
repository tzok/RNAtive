services:
  frontend:
    build:
      context: my-app
      args:
        - REACT_APP_SERVER_ADDRESS=https://rnative.cs.put.poznan.pl/api/compute
    restart: unless-stopped

  backend:
    build: .
    environment:
      - SPRING_DATASOURCE_URL=jdbc:postgresql://db:5432/rnative
      - SPRING_DATASOURCE_USERNAME=postgres
      - SPRING_DATASOURCE_PASSWORD=postgres
      - POSTGRES_HOST=db
      - POSTGRES_DB=rnative
      - POSTGRES_USER=postgres
      - POSTGRES_PASSWORD=postgres
      - ANALYSIS_SERVICE_URL=https://rnative.cs.put.poznan.pl/adapters
    restart: unless-stopped
    depends_on:
      db:
        condition: service_healthy

  db:
    image: postgres:alpine
    environment:
      - POSTGRES_DB=rnative
      - POSTGRES_USER=postgres
      - POSTGRES_PASSWORD=postgres
    volumes:
      - postgres_data:/var/lib/postgresql/data
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U postgres"]
      interval: 5s
      timeout: 5s
      retries: 5
    restart: unless-stopped

  adapters:
    image: rnapdbee-adapters-image
    environment:
      - ADAPTERS_WORKERS=6
      - ADAPTERS_THREADS=1
      - ADAPTERS_WORKER_TIMEOUT=1200
      - ADAPTERS_MAX_REQUESTS=10
      - ADAPTERS_GUNICORN_LOG_LEVEL=info
      - ADAPTERS_CACHE_DIR=/var/tmp/adapters_cache
      - ADAPTERS_CACHE_THRESHOLD=50
      - ADAPTERS_CACHE_TIMEOUT=3600
      - ADAPTERS_SUBPROCESS_TIMEOUT=600
      - ADAPTERS_PSEUDOVIEWER_TIMEOUT=40
      - ADAPTERS_FLASK_LOG_LEVEL=INFO
    restart: unless-stopped
    volumes:
      - adapters_cache:/var/tmp/adapters_cache

  nginx:
    image: nginx:alpine
    ports:
      - "80:80"
      - "443:443"
    volumes:
      - ./nginx/nginx.conf:/etc/nginx/nginx.conf:ro
      - ./certbot/conf:/etc/letsencrypt
      - ./certbot/www:/var/www/certbot
    depends_on:
      - frontend
      - backend
      - adapters
    restart: unless-stopped
    command: "/bin/sh -c 'while :; do sleep 6h & wait $${!}; nginx -s reload; done & nginx -g \"daemon off;\"'"

  certbot:
    image: certbot/certbot
    volumes:
      - ./certbot/conf:/etc/letsencrypt
      - ./certbot/www:/var/www/certbot
    restart: unless-stopped
    entrypoint: "/bin/sh -c 'trap exit TERM; while :; do certbot renew; sleep 12h & wait $${!}; done;'"

  rnapolis:
    image: ghcr.io/tzok/cli2rest-rnapolis:0.8.1
    restart: unless-stopped
    healthcheck:
      test: ["CMD-SHELL", "python -c \"import requests; requests.get('http://localhost:8000/health').raise_for_status()\" || exit 1"]
      interval: 30s
      timeout: 5s
      retries: 5

  varna-tz:
    image: ghcr.io/tzok/cli2rest-varna-tz:1.5.0_0.9.5
    restart: unless-stopped
    healthcheck:
      test: ["CMD-SHELL", "python -c \"import requests; requests.get('http://localhost:8000/health').raise_for_status()\" || exit 1"]
      interval: 30s
      timeout: 5s
      retries: 5

  rchie:
    image: ghcr.io/tzok/cli2rest-rchie:1.36.0_0.9.5
    restart: unless-stopped
    healthcheck:
      test: ["CMD-SHELL", "python -c \"import requests; requests.get('http://localhost:8000/health').raise_for_status()\" || exit 1"]
      interval: 30s
      timeout: 5s
      retries: 5

volumes:
  postgres_data:
  adapters_cache:
